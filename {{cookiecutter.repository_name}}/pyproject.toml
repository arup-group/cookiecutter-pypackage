{%- set license_classifiers = {
"MIT license": "License :: OSI Approved :: MIT License",
"BSD license": "License :: OSI Approved :: BSD License",
"ISC license": "License :: OSI Approved :: ISC License (ISCL)",
"Apache Software License 2.0": "License :: OSI Approved :: Apache Software License",
"GNU General Public License v3": "License :: OSI Approved :: GNU General Public License v3 (GPLv3)"
} %}
{%- set license_shortname = {
"MIT license": "MIT",
"BSD license": "BSD",
"ISC license": "ISCL",
"Apache Software License 2.0": "Apache 2.0",
"GNU General Public License v3": "GPLv3"
} %}

[tool.pytest.ini_options]
minversion = "6.0"
# opts:
# `--strict-markers` - Raise error on unexpected pytest markers being used (add new markers to `markers` config)
# `-nauto` - parallelise over as many threads are available (uses pytest-xdist). This auto-selects 1 thread when using the `--pdb` debugging flag.
{%- if cookiecutter.create_jupyter_notebook_directory|lower == "y" %}
# `--nbmake --nbmake-kernel={{ cookiecutter.repository_name }}` - test example notebooks using the "{{ cookiecutter.repository_name }}" notebook kernel (uses nbmake)
{%- endif %}
# `--cov --cov-report=xml --cov-config=pyproject.toml` - generate coverage report for tests (uses pytest-cov; call `--no-cov` in CLI to switch off; `--cov-config` include to avoid bug)
# `-m 'not high_mem'` - Do not run tests marked as consuming large amounts of memory (call `-m "high_mem"` in CLI to invert this; only `high_mem` marked tests will be run)
# `-p no:memray` - Do not use the memray memory profiling plugin (call `-p memray` in CLI to switch on memory profiling)
{%- if cookiecutter.create_jupyter_notebook_directory|lower == "y" %}
addopts = "-rav --strict-markers -nauto --nbmake --nbmake-kernel={{ cookiecutter.repository_name }} --cov --cov-report=xml --cov-config=pyproject.toml -m 'not high_mem' -p no:memray"
testpaths = ["tests", "examples"]
{% else %}
addopts = "-rav --strict-markers -nauto --cov --cov-report=xml --cov-config=pyproject.toml -m 'not high_mem' -p no:memray"
testpaths = ["tests"]
{%- endif %}
# to mark a test, decorate it with `@pytest.mark.[marker-name]`
markers = ["high_mem", "limit_memory"]
filterwarnings = [
    # https://github.com/pytest-dev/pytest-xdist/issues/825
    "ignore:The --rsyncdir command line argument and rsyncdirs config variable are deprecated.:DeprecationWarning",
]

[tool.coverage.run]
branch = true
source = ["src/"]

[tool.coverage.report]
fail_under = 89

[tool.coverage.html]
directory = "reports/coverage"

[tool.coverage.xml]
output = "reports/coverage/coverage.xml"

[tool.ruff]
line-length = 100
preview = true # required to activate many pycodestyle errors and warnings as of 2024-03-13

[tool.ruff.format]
exclude = [".*.egg-info", "requirements/**"]
skip-magic-trailing-comma = true
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint]
select = [
    # pycodestyle errors
    "E",
    # pycodestyle warnings
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # Docstrings
    "D"
]
ignore = [
    # here and below, rules are redundant with formatter, see
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "E501",
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300"
]

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

# Ignore `E402` (import violations) and `F401` (unused imports) in all `__init__.py` files
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]
"*.ipynb" = ["E402"]
"tests/*" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 200
ignore-overlong-task-comments = true

[tool.codespell]
skip = "tests/*.py,AUTHORS.md"
count = ""
quiet-level = 3
# Uncomment and add words that are false flags as a comma delimited string
# ignore-words-list = ""

[tool.setuptools.packages.find]
include = ["{{ cookiecutter.module_name }}*"]
where = ["src"]

[tool.setuptools.package-data]
# Add file globs from the source code directory if they include non-py files that should be packaged
# E.g. "fixtures/**/*"
# "py.typed" is added by default. It allows `mypy` to register the package as having type hints.
{{ cookiecutter.module_name }} = ["py.typed"]


[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
classifiers = [
        "Development Status :: 2 - Pre-Alpha",
        "Intended Audience :: Developers",
{%- if cookiecutter.open_source_license in license_classifiers %}
        "{{ license_classifiers[cookiecutter.open_source_license] }}",
{%- endif %}
        "Natural Language :: English",
        "Programming Language :: Python :: 3",
    ]

name = "{{ cookiecutter.package_name }}"
authors = [
    { name = "{{ cookiecutter.full_name.replace('\"', '\\\"') }}", email = "{{ cookiecutter.email }}" },
]
maintainers = []
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
requires-python = ">=3.8"
keywords = ["{{ cookiecutter.package_name }}", "arup"]
{%- if cookiecutter.open_source_license in license_shortname %}
license = { text = "{{ license_shortname[cookiecutter.open_source_license] }}" }
{%- endif %}
dynamic = ["dependencies", "optional-dependencies", "version"]

[tool.setuptools.dynamic]
dependencies = { file = ["requirements/base.txt"] }
version = { attr = "{{ cookiecutter.module_name }}.__version__" }

{%- if cookiecutter.command_line_interface|lower == "y" %}
[project.scripts]
{{ cookiecutter.module_name }}="{{ cookiecutter.module_name }}.cli:cli"
{%- endif %}

[tool.setuptools.dynamic.optional-dependencies]
dev = { file = ["requirements/dev.txt"] }

[project.urls]
repository = "https://github.com/{{ cookiecutter.repository_owner }}/{{ cookiecutter.repository_name }}"
documentation = "https://{{ cookiecutter.repository_owner }}.github.io/{{ cookiecutter.repository_name }}"
changelog = "https://github.com/{{ cookiecutter.repository_owner }}/{{ cookiecutter.repository_name }}/blob/main/CHANGELOG.md"
