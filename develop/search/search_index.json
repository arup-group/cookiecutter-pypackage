{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"tutorial/","title":"Tutorial","text":"<p>Note</p> <p>Did you find any of these instructions confusing? Edit this file and submit a pull request with your improvements!</p> <p>To start with, you will need a GitHub account. If you are an Arup employee, you should sign up to the Arup GitHub group.</p> <p>If you are new to Git and GitHub, you should probably spend a few minutes on some of the tutorials at the top of the page at GitHub Help.</p>"},{"location":"tutorial/#setting-up-your-project","title":"Setting up your project","text":""},{"location":"tutorial/#step-1-install-cruft","title":"Step 1: Install Cruft","text":"<p>First, you need to create and activate a conda/mamba environment for using Cruft (a Cookiecutter-compatible tool which allows for project updating). Use your favorite method, or create an environment like this:</p> With mambaWith pip <p><pre><code>    mamba create -n cookiecutter cruft\n</code></pre> Activate your environment:</p> <pre><code>    mamba activate cookiecutter\n</code></pre> <pre><code>    pip install -U cruft\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-package","title":"Step 2: Generate Your Package","text":"<p>Now it's time to generate your Python package.</p> <p>Use cruft, pointing it at the cookiecutter-pypackage repository:</p> <pre><code>    cruft create https://github.com/arup-group/cookiecutter-pypackage.git\n</code></pre> <p>You'll be asked to enter a bunch of values to set the package up. If you don't know what to enter, stick with the defaults.</p>"},{"location":"tutorial/#step-3-create-a-github-repository","title":"Step 3: Create a GitHub Repository","text":"<p>Go to your GitHub account and create a new repository named <code>mypackage</code>, where <code>mypackage</code> matches the <code>[project_slug]</code> from your answers to running cookiecutter.</p> <p>You will find one folder named after the <code>[project_slug]</code>. Change directory into this folder, and then setup git to use your GitHub repo and upload the code:</p> <pre><code>    cd mypackage\n    git init .\n    git add .\n    git commit -m \"Initial skeleton.\"\ngit remote add origin git@github.com:HOST/mypackage.git\n    git push -u origin main\n</code></pre> <p>Where <code>HOST</code> and <code>mypackage</code> are adjusted to the host group/user for your repository and the package name, respectively.</p> <p>Note</p> <p>If you are uploading directly to an <code>arup-group</code> repository, use <code>arup-group</code> for <code>HOST</code>.</p>"},{"location":"tutorial/#step-4-define-requirements","title":"Step 4: Define requirements","text":"<p>As well as writing the package source code, documentation, and tests, you will need to define the packages on which your project depends. You can find an empty requirements file for you to complete in your new project folder: <code>requirements/base.txt</code>.</p>"},{"location":"tutorial/#step-5-create-a-development-environment-for-your-project","title":"Step 5: Create a development environment for your project","text":"<p>To install the necessary packages to develop your Python package, follow the instructions given in the new project's README / online documentation (https://HOST.github.io/mypackage, where <code>HOST</code> is the name of the owner of the repository on GitHub, e.g. <code>myusername</code> or <code>arup-group</code>).</p>"},{"location":"tutorial/#step-6-tweak-the-generated-project-files-to-meet-your-specific-needs-preferences","title":"Step 6: Tweak the generated project files to meet your specific needs / preferences","text":"<p>Although we recommend you stick with the default setup provided by the template, there are a few files you may like to tweak / things you'll want to add. This list is not exhaustive, but gives you an idea of where to look.</p> <ol> <li> <p>Changing how continuous integration (CI) works. The configuration files in <code>.github/workflows</code> are based on the PAM package workflows and rely on the City Modelling Lab's reusable workflows. They will run different levels of tests when pushing new commits and when opening pull requests. You may want to change some of this configuration, e.g., the python versions that tests are run on or whether to notify a slack channel when CI fails/succeeds.</p> </li> <li> <p>Adding repository secrets for use in CI. To upload your package to an AWS S3 bucket you will need the secrets <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, <code>AWS_S3_CODE_BUCKET</code> available in your repository. You also need secrets for uploading to Anaconda and initiating the Slack notification bot. You can find all the secrets you need for different actions in the City Modelling Lab reusable workflow repository.</p> </li> <li> <p>Adding logos. The <code>resources</code> directory includes a logo subdirectory that you can add any branding for your package. E.g., <code>resources/logos/title.png</code> will be shown at the top of the README, or you can add a favicon and then link it to your documentation.</p> </li> <li> <p>Update linting strictness. We use ruff to ensure high code quality. However, it checks only for a subset of possible issues with your code. This is due to existing projects being very difficult to update to meet strict rules. If you are starting a project from scratch, you may like to add more rules for it to check from its extensive list.</p> </li> </ol>"},{"location":"tutorial/#keeping-your-project-up-to-date","title":"Keeping your project up-to-date","text":"<p>We may make changes to this template that you want to pull into your project after you have created it. Cruft allows you to do this, and one of your project's CI workflows will verify whether there are new template updates that you might like to merge in.</p> <p>Check if there are updates: <pre><code>    cruft check\n</code></pre></p> <p>View the diff between your project and the most up-to-date template: <pre><code>    cruft diff\n</code></pre></p> <p>Apply any updates that exist:</p> <pre><code>    cruft update\n</code></pre> <p>Note</p> <p>There is a limit to how well cruft can apply an update. More likely than not, it will produce a lot of <code>.rej</code> files explaining what updates it tried to implement, but failed to merge in. You will need to go through each of these manually and make the changes in the corresponding source code file.</p>"},{"location":"tutorial/#changing-inputs-after-project-generation","title":"Changing inputs after project generation","text":"<p>You can change your mind on some of the input variables you gave when initialising the project and use <code>cruft</code> to update them.</p> <p>The following variables are suitable for updating:</p> <ul> <li>full_name</li> <li>email</li> <li>github_username</li> <li>repository_org</li> <li>project_name</li> <li>project_slug</li> <li>project_short_description</li> <li>conda_channel</li> <li>version</li> <li>open_source_license</li> </ul> <p>Even when changing one of these values, be aware that you will need to apply some manual changes based on <code>.rej</code> files that cruft will generate.</p>"},{"location":"tutorial/#having-problems","title":"Having problems?","text":"<p>Is something not working?</p> <p> Report a bug</p> <p>Missing information in our docs?</p> <p> Report a docs issue</p> <p>Want to submit an idea?</p> <p> Request a change</p> <p>Have a question or need help?</p> <p> Ask a question</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":"<p>These initial changes are all relative to the original cookiecutter PyPackage repository, of which this is a fork. The list is not exhaustive as many changes have been made.</p>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>GitHub actions that rely on City Modelling Lab reusable actions.</li> <li>Schema for Cookiecutter input argument config (in <code>cookiecutter.json</code>) + tests added to CI to validate the config and the schema itself.</li> <li>Templates for different types of GitHub issues.</li> <li>Cookiecutter contributing guidelines and changelog.</li> <li>Dockerfile to generate basic Docker image from project.</li> <li>memory profiling test template.</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Documentation based on Markdown and MKDocs instead of ReStructured text and Sphinx (for improved readability and simpler configuration).</li> <li>Python project config moved from <code>setup.py</code> to <code>pyproject.toml</code>.</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Use of Travis CI.</li> <li>Use of Tox.</li> <li>Upload to PyPi (with a plan to reintroduce this).</li> <li>Possibility to use Argparse for CLI (i.e., Click is now the only option).</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"CONTRIBUTING/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"CONTRIBUTING/#report-issues","title":"Report Issues","text":"<p>Is something not working?</p> <p> Report a bug</p> <p>Missing information in our docs?</p> <p> Report a docs issue</p> <p>Want to submit an idea?</p> <p> Request a change</p>"},{"location":"CONTRIBUTING/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.</p>"},{"location":"CONTRIBUTING/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#write-documentation","title":"Write Documentation","text":"<p>Cookiecutter PyPackage could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"CONTRIBUTING/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue or start a discussion.</p> <p>If you are proposing a new feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> </ul>"},{"location":"CONTRIBUTING/#setting-up-and-working-in-a-development-environment","title":"Setting up and working in a development environment","text":"<p>Ready to contribute? Here's how to set up <code>cookiecutter-pypackage</code> for local development. Please note this documentation assumes you already have <code>mamba</code> and <code>Git</code> installed and ready to go.</p> <ol> <li> <p>Fork the <code>cookiecutter-pypackage</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally in a directory of your choice (i.e., change <code>path/to/repositories</code>):</p> </li> </ol> <pre><code>cd path/to/repositories\ngit clone git@github.com:YOUR_GITHUB_USERNAME/cookiecutter-pypackage.git\n</code></pre> <ol> <li>Assuming you have mamba installed, you can create a new environment for your local    development by typing:</li> </ol> <pre><code>mamba create -c conda-forge -n cookiecutter-pypackage-dev --file requirements/dev.txt\nmamba activate cookiecutter-pypackage-dev\npip install --no-deps -e .\n</code></pre> <ol> <li>Install <code>pre-commit</code>, which will ensure your changes are properly formatted when you commit your code (or install extension to run Ruff and Black on save in your IDE):</li> </ol> <pre><code>pre-commit install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <ol> <li> <p>Make your changes! If your contribution is a bug fix or new feature, you may want to add a test to the existing test suite. See Add a New Test below for details.</p> </li> <li> <p>When you're done making changes on this new branch, run the tests:</p> </li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"CONTRIBUTING/#pull-request-pr-guidelines","title":"Pull Request (PR) Guidelines","text":"<p>Before you submit a PR, check that it meets these guidelines:</p> <ol> <li> <p>The changelog has been updated.</p> </li> <li> <p>If the pull request adds functionality, the docs should be updated.    Put your new functionality into a function with a docstring, and add the feature to the list in README.md.</p> </li> <li> <p>The PR should work for Python 3.9 - 3.11 (inclusive).    Continuous integration tests will run in your PR and will fail if your changes break anything.</p> </li> </ol>"},{"location":"CONTRIBUTING/#add-to-the-template","title":"Add to the template","text":"<p>Cookiecutter templates use Jinja templating syntax. For example, <code>{{ cookiecutter.project_slug }}</code> -&gt; <code>python_boilerplate</code> on running cookiecutter. You can get a good feel for this by looking at the current implementation.</p> <p>The GitHub CI workflows also use the <code>{{}}</code> syntax, requiring anything that should be left behind after cookiecutter works its magic to be wrapped in {% raw %} and {% endraw %} commands.</p> <p>If you want to add an empty directory, you should add a <code>.ignore</code> file into it (e.g., see <code>resources/logos</code>). This will ensure that cruft actually builds the directories. In a post-generation hook, this <code>.ignore</code> file will be deleted and you will be left with the empty directory.</p>"},{"location":"CONTRIBUTING/#add-a-new-test","title":"Add a New Test","text":"<p>When fixing a bug or adding features, it's good practice to add a test to demonstrate your fix or new feature behaves as expected. These tests should focus on one tiny bit of functionality and prove changes are correct.</p> <p>To write and run your new test, follow these steps:</p> <ol> <li> <p>Add the new test to <code>tests/test_bake_project.py</code>.    Focus your test on the specific bug or a small part of the new feature.</p> </li> <li> <p>If you have already made changes to the code, stash your changes and confirm all your changes were stashed: <pre><code>git stash\ngit stash list\n</code></pre></p> </li> <li> <p>Run your test and confirm that your test fails.    If your test does not fail, rewrite the test until it fails on the original code: <pre><code>pytest\n</code></pre></p> </li> <li> <p>Proceed work on your bug fix or new feature or restore your changes.    To restore your stashed changes and confirm their restoration: <pre><code>git stash pop\ngit stash list\n</code></pre></p> </li> <li> <p>Rerun your test and confirm that your test passes.    If it passes, congratulations!</p> </li> </ol>"},{"location":"","title":"Arup Cookiecutter Python Package Template","text":"<p>Cookiecutter template for an Arup Python package.</p> <p>This template is based on @audreyfeldroy's original cookiecutter template. It has been updated to use latest Python Package best practices and to align with Arup's City Modelling Lab Python projects.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Testing setup with pytest.</li> <li>Markdown based documentation, using mkdocs, ready for generation with GitHub pages.</li> <li>Project metadata and plugin configuration specified in a <code>pyproject.toml</code> file, according to the latest standards.</li> <li>Auto-release to your private conda channel when you create a new release on GitHub (optional).</li> <li>Command line interface using click (optional).</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>To be able to keep your project up-tp-date as changes are made to the template, we recommend you use Cruft, which is fully compatible with Cookiecutter. First, install the latest version of Cruft if you haven't installed it yet:</p> <pre><code>    conda install cruft\n</code></pre> <p>Generate a Python package project:</p> <pre><code>    cruft create https://github.com/arup-group/cookiecutter-pypackage\n</code></pre> <p>Then:</p> <ul> <li>Create a local repository and put it there.</li> <li>Add the packages you will need for your project and their versions to <code>requirements/base.txt</code>.</li> <li>initialise your project as a git repository and link it to an online repository. For more details, see the tutorial.</li> </ul>"},{"location":"#keeping-your-project-up-to-date","title":"Keeping your project up-to-date","text":"<p>We may make changes to this template that you want to pull into your project after you have created it. Cruft allows you to do this, and one of your project's CI workflows will verify whether there are new template updates that you might like to merge in.</p> <p>To check if there are updates: <pre><code>    cruft check\n</code></pre></p> <p>To apply updates: <pre><code>    cruft update\n</code></pre></p>"},{"location":"#not-exactly-what-you-want","title":"Not Exactly What You Want?","text":"<p>Don't worry, you have options:</p>"},{"location":"#other-arup-cookiecutter-templates","title":"Other Arup Cookiecutter Templates","text":"<p>There are currently no other Arup cookiecutter templates.</p>"},{"location":"#other-cookiecutter-templates","title":"Other Cookiecutter Templates","text":"<p>You can find a list of other Python project templates on the parent template repository: audreyfeldroy/cookiecutter-pypackage.</p>"},{"location":"#fork-this-create-your-own","title":"Fork This / Create Your Own","text":"<p>If you have differences in your preferred setup, you can fork this to create your own version. Or you create your own; it doesn't strictly have to be a fork.</p> <ul> <li> <p>Once you have your own version working, add it to the Other Arup Cookiecutter Templates list above with a brief description.</p> </li> <li> <p>It's up to you whether or not to rename your fork/own version. Do whatever you think sounds good.</p> </li> </ul>"},{"location":"#or-submit-a-pull-request","title":"Or Submit a Pull Request","text":"<p>We also accept pull requests on this repository, if they're small!</p>"},{"location":"schema/","title":"Configuration values","text":"<p>You will be prompted to fill these values when you create your Python project. If you do not know what value to provide, press enter and a default value will be used.</p> <ul> <li> <p><code>full_name</code> (string): Your full name. Default: <code>\"Ove Arup\"</code>.</p> </li> <li> <p><code>email</code> (string): Your email address. Default: <code>\"ove.arup@arup.com\"</code>.</p> </li> <li> <p><code>github_username</code> (string): Your GitHub username. Default: <code>\"ovearup\"</code>.</p> </li> <li> <p><code>repository_org</code> (string): The organisation in which your repository will be hosted. For personal projects, this can be your GitHub username. Default: <code>\"arup-group\"</code>.</p> </li> <li> <p><code>project_name</code> (string): The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. Default: <code>\"Python Boilerplate\"</code>.</p> </li> <li> <p><code>project_slug</code> (string): The namespace of your Python package. This should be Python import-friendly. Typically, it is the \"slugified\" version of <code>project_name</code> (e.g. <code>My software package</code> -&gt; <code>my_software_package</code>). Default: <code>\"Lower case equivalent of [project_name] with spaces and dashes (-) replaced with an underscore (_)\"</code>.</p> </li> <li> <p><code>project_short_description</code> (string): A 1-sentence description of what your Python package does. Default: <code>\"Python Boilerplate contains all the boilerplate you need to create a Python package.\"</code>.</p> </li> <li> <p><code>index_package</code> (array): Where to release new packaged versions of the project to. If \"none\", releases will not be published beyond GitHub. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"conda\", \"none\"]</code>. Default: <code>\"conda\"</code>.</li> </ul> </li> <li> <p><code>conda_channel</code> (string): Your anaconda channel, if releases of your package will be uploaded to Anaconda. Default: <code>\"[github_username]\"</code>.</p> </li> <li> <p><code>version</code> (string): The starting version number of the package. Default: <code>\"0.1.0\"</code>.</p> </li> <li> <p><code>create_jupyter_notebook_directory</code> (array): If \"y\", an <code>examples</code> directory will be created in which Jupyter Notebooks can be saved. These notebooks will be rendered in the documentation and will be formatted with Black and Ruff. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"y\"</code>.</li> </ul> </li> <li> <p><code>command_line_interface</code> (array): If \"y\", a <code>cli.py</code> file will be included in the project source code based on using <code>Click</code>. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"y\"</code>.</li> </ul> </li> <li> <p><code>create_author_file</code> (array): If \"y\", create an authors file. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"y\"</code>.</li> </ul> </li> <li> <p><code>create_docker_file</code> (array): If \"y\", create an Dockerfile which allows a Docker image of the project to be built in a linux virtual machine with a basic Bash entry-point. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"y\"</code>.</li> </ul> </li> <li> <p><code>open_source_license</code> (array): Choose a license. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"MIT license\", \"BSD license\", \"ISC license\", \"Apache Software License 2.0\", \"GNU General Public License v3\", \"Not open source\"]</code>. Default: <code>\"MIT license\"</code>.</li> </ul> </li> </ul>"}]}