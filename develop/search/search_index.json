{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"stay_updated/","title":"Updating your project","text":"<p>This repository isn't just for creating your project in the first place. It can be used to update your project when fixes / features are added to the template and to update your project when you change your mind about the input parameters you used when you generated your project.</p> <p>Note</p> <p>There is a limit to how well Cruft can apply updates / changes to input parameters. More likely than not, it will produce a lot of <code>.rej</code> files explaining what updates it tried to implement, but failed to merge in. You will need to go through each of these manually and make the changes in the corresponding source code file.</p> <p>After each change, delete the corresponding <code>.rej</code> file. Your project will not let you commit changes if <code>.rej</code> files are still present.</p> <p>Info</p> <p>You can run updates from within your project's development environment since <code>cruft</code> is installed into it.</p>"},{"location":"stay_updated/#keeping-your-project-up-to-date","title":"Keeping your project up-to-date","text":"<p>We may make changes to this template that you want to pull into your project after you have generated it. Cruft allows you to do this, and one of your project's CI workflows will verify whether there are new template updates that you might like to merge in.</p> <p>Check if there are updates:</p> <pre><code>cruft check\n</code></pre> <p>View the diff between your project and the most up-to-date template:</p> <pre><code>cruft diff\n</code></pre> <p>Apply any updates that exist:</p> <pre><code>cruft update\n</code></pre>"},{"location":"stay_updated/#changing-input-parameters-after-project-generation","title":"Changing input parameters after project generation","text":"<p>You can change your mind on the input parameters you gave when initialising the project and use <code>cruft</code> to update them.</p> <p>Changing some inputs will cause you less trouble than others. For example, changing the email associated with the project will probably be seamless. Changing whether to include a CLI or example notebooks, however, may not be. This is because these changes entail the deletion of files / directories when you do not want them.</p> <p>If you are finding it difficult to make a change, you can try generating a new project with your preferred input parameters and then porting across the changes (make sure to update the parameter values in your initial project's <code>cruft.json</code> file.).</p> <p>Example</p> <p>To update your project to upload the package to both an Anaconda channel and to PyPI:</p> <pre><code>cruft update --variables-to-update '{ \"upload_conda_package\" : \"y\" , \"upload_pypi_package\": \"y\"}'\n</code></pre> <p>Info</p> <p>For more info, see the Cruft documentation</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>Note</p> <p>Did you find any of these instructions confusing? Edit this file and submit a pull request with your improvements!</p> <p>To start with, you will need a GitHub account. If you are an Arup employee, you should sign up to the Arup GitHub group.</p> <p>If you are new to Git and GitHub, you should probably spend a few minutes on some of the tutorials at the top of the page at GitHub Help.</p>"},{"location":"tutorial/#setting-up-your-project","title":"Setting up your project","text":"<p>Note</p> <p>We will refer to project names, directories, github accounts, etc. in this tutorial. You will be using different ones for your project, with the possible exception of <code>arup-group</code> as the <code>repository_owner</code>. For reference, here's the configuration values we will use that you will have the option to set when creating your project with cruft:</p> <ul> <li><code>github_username</code>: \"ovearup\"</li> <li><code>repository_owner</code>: \"arup-group\"</li> <li><code>project_title</code>: \"Python Boilerplate\"</li> <li><code>repository_name</code>: \"python-boilerplate\"</li> <li><code>package_name</code>: \"cml-python-boilerplate\" (1)</li> <li><code>module_name</code>: \"python_boilerplate\" (2)</li> </ul> <p>Here are some of the assumptions we will make about your local system, which you will need to change as necessary:</p> <ul> <li>You have mamba installed (conda/micromamba also work)</li> <li>You store your projects on your device at <code>~/Repos</code> (Windows: <code>C:\\\\Users\\yourusername\\Repos</code>)</li> </ul> <ol> <li>The package name needs to be globally unique, i.e., not available on conda-forge or on PyPI. This is why it could look different to <code>repository_name</code> and <code>module_name</code>. Search for your preferred package name before setting it here. In the City Modelling Lab, we use the <code>cml-</code> prefix if we need to make our package name unique.</li> <li>Repositories tend to use <code>-</code> between words while modules must have <code>_</code> between words as this is the name you will use to import your module in Python: <code>import python_boilerplate</code>.</li> </ol>"},{"location":"tutorial/#step-1-install-cruft","title":"Step 1: Install Cruft","text":"<p>First, you need to create and activate a conda/mamba environment for using Cruft (a Cookiecutter-compatible tool which allows for project updating). Use your favorite method, or create an environment like this:</p> With mambaWith pip <p><pre><code>mamba create -n cookiecutter cruft\n</code></pre> Activate your environment:</p> <pre><code>mamba activate cookiecutter\n</code></pre> <pre><code>pip install -U cruft\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-package","title":"Step 2: Generate Your Package","text":"<p>Now it's time to generate your Python package.</p> <p>Use cruft, pointing it at the cookiecutter-pypackage repository:</p> <pre><code>cd ~/Repos # (1)!\ncruft create https://github.com/arup-group/cookiecutter-pypackage.git\n</code></pre> <ol> <li>Change this directory name to match where you store GitHub repositories on your device.</li> </ol> <p>You'll be asked to enter a bunch of values to set the package up. If you don't know what to enter, stick with the defaults. The following steps are based on using the default values.</p> <p>Once complete, you will find the <code>python-boilerplate</code> directory. Change directory into this folder:</p> <pre><code>cd python-boilerplate # (1)!\n</code></pre> <ol> <li>Change this directory name based on the name you gave in <code>repository_name</code>.</li> </ol> <p>Tip</p> <p>If you are generating a project which will be hosted in <code>arup-group</code>, it will default to <code>internal</code>. Therefore you will need to wait until the project is made public (with a suitable open source license) before you allow uploads of your package to PyPI or an Anaconda channel. This is why the parameters <code>upload_conda_package</code> and <code>upload_pypi_package</code> default to <code>n</code> (i.e. no upload).</p> <p>When you're ready to take the leap to a public repository, you can update your project input parameters to enable uploads.</p>"},{"location":"tutorial/#step-3-create-a-github-repository","title":"Step 3: Create a GitHub Repository","text":"<p>Go to the GitHub page for <code>[repository_owner]</code>, e.g. <code>https://github.com/arup-group</code> or <code>https://github.com/ovearup</code>, and create a new repository with <code>[repository_name]</code> (<code>python-boilerplate</code>).</p> <p>Do not add anything to your account: no <code>README</code>, no <code>LICENSE</code>, no <code>.gitignore</code>. Everything will be added when you push your newly generated package.</p> <p>Once you have your repository created, go back to your command line where you are inside your newly created local project, then upload that code:</p> <pre><code>git init .\ngit add .\ngit commit -m \"Initial skeleton.\"\ngit remote add origin git@github.com:arup-group/python-boilerplate.git # (1)!\ngit push -u origin main\n</code></pre> <ol> <li>Change <code>python-boilerplate</code> to match the name you have gave in <code>repository-name</code>.</li> </ol> <p>Where <code>arup-group</code> and <code>python-boilerplate</code> are adjusted to the host group/user for your repository and the package name, respectively.</p>"},{"location":"tutorial/#step-4-enable-github-pages-for-your-documentation","title":"Step 4: Enable GitHub pages for your documentation","text":"<p>Once you have uploaded your project to your repository, return to the repository and set up GitHub Pages to host your documentation. You should choose the <code>gh-pages</code> branch (this will only appear a few minutes after you push your first commit) under the <code>Branch</code> dropdown.</p> <p>Note</p> <p>If <code>master</code> is the default name for your primary project branch, the documentation will not build automatically. You should ensure you have renamed your primary branch to <code>main</code>.</p> <p>Warning</p> <p>If the repository is in your own user account (e.g., <code>overarup</code>), it must be a public repository to be able to host documentation using github pages. If the repository is in <code>arup-group</code>, then it can be <code>internal</code> (the default) and still host documentation using github pages.</p>"},{"location":"tutorial/#step-5-define-requirements","title":"Step 5: Define requirements","text":"<p>As well as writing the package source code, documentation, and tests, you will need to define the packages on which your project depends. You can find an almost empty requirements file for you to complete in your new project folder: <code>requirements/base.txt</code>. It cannot be empty, otherwise mamba might complain. You can update this as you go along and need new packages in your project.</p>"},{"location":"tutorial/#step-6-create-a-development-environment-for-your-project","title":"Step 6: Create a development environment for your project","text":"<p>To install the necessary packages to develop your Python package, follow the instructions automatically generated in your new project's README / online documentation (e.g., https://arup-group.github.io/python-boilerplate).</p> <p>Note</p> <p>As you update the requirements that you define as dependencies, you should bulldoze your install and recreate it. E.g., if you create your environment using mamba/conda:</p> <pre><code>mamba create -n python-boilerplate -c conda-forge --file requirements/base.txt --file requirements/dev.txt\n</code></pre> <p>You should run this exact same command after updating <code>requirements/base.txt</code> and say yes to overriding the existing <code>python-boilerplate</code> environment. This is a much better way of managing your python environments than adding the dependencies ad-hoc using <code>mamba install ...</code>.</p>"},{"location":"tutorial/#step-7-tweak-the-generated-project-files-to-meet-your-specific-needs-preferences","title":"Step 7: Tweak the generated project files to meet your specific needs / preferences","text":"<p>Although we recommend you stick with the default setup provided by the template, there are a few files you may like to tweak / things you'll want to add. This list is not exhaustive, but gives you an idea of where to look.</p> <ol> <li> <p>Changing how continuous integration (CI) works. The configuration files in <code>.github/workflows</code> are based on the PAM package workflows and rely on the City Modelling Lab's reusable workflows. They will run different levels of tests when pushing new commits and when opening pull requests. You may want to change some of this configuration, e.g., the python versions that tests are run on or whether to (1) notify a slack channel when CI fails/succeeds and (2) attempt to upload the package to AWS (if the <code>upload_aws_image</code> configuration option is active).</p> </li> <li> <p>Adding repository secrets for use in CI. To upload your package to Anaconda (<code>upload_conda_package</code>), you will need an API token saved as the <code>ANACONDA_TOKEN</code> repository secret. To upload to an AWS S3 bucket (<code>upload_aws_image</code>) you will need the secrets <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, <code>AWS_S3_CODE_BUCKET</code> available in your repository. You also need secrets for initiating the Slack notification bot and uploading to an AWS S3 bucket (+ possibly some AWS terraforming). You can find all the secrets you need for different actions in the City Modelling Lab reusable workflow repository.</p> </li> </ol> <p>!!! note:     Some secrets should be stored in GitHub environments.     Namely, releasing packages to public packages indexes should be in <code>pre-release</code> (for <code>.github/workflows/pre-release.yml</code> job secrets) and <code>release</code> (for <code>.github/workflows/release.yml</code> job secrets) environments.     We recommend you then place protection rules on those environments to only allow maintainers to release the workflow jobs.</p> <ol> <li> <p>Adding logos. The <code>resources</code> directory includes a logo subdirectory that you can add any branding for your package. E.g., <code>resources/logos/title.png</code> will be shown at the top of the README, or you can add a favicon and then link it to your documentation.</p> </li> <li> <p>Updating linting strictness. We use ruff to ensure high code quality. However, it checks only for a subset of possible issues with your code. This is due to existing projects being very difficult to update to meet strict rules. If you are starting a project from scratch, you may like to add more rules for it to check from its extensive list.</p> </li> <li> <p>limiting conda build architectures. By default, the conda package (if you choose to have one built) will build one package for all architectures (i.e., windows, linux, macos, ...). Usually, your dependencies will be aligned with this: they will also be installable on any architecture. However, there are times when you might have a dependency that can not be installed on e.g., Windows. If that is the case, be sure to dive into <code>conda.recipe/meta.yaml</code> and change some lines in <code>build</code> following the comments there.</p> </li> </ol>"},{"location":"tutorial/#having-problems","title":"Having problems?","text":"<p>Is something not working?</p> <p> Report a bug</p> <p>Missing information in our docs?</p> <p> Report a docs issue</p> <p>Want to submit an idea?</p> <p> Request a change</p> <p>Have a question or need help?</p> <p> Ask a question</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#changelog","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased-tbc","title":"[Unreleased] - TBC","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Documentation accessibility checking (#41).</li> <li>Documentation FAQ in contributing guidelines (#41).</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Template documentation in light of accessibility issues of some features (namely, mkdocs-material annotations and task lists, and mkdocs-jupyter codeblock highlighting) (#41).</li> <li>Triggering of CI linting and codecov upload for internal (i.e. not open-source) projects (#44).</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Docs CI run on PR to main or on main, with different jobs run in each case (#33).</li> <li>Docs/PR CI jobs do not trigger on github workflow changes except their own definition files (#32).</li> <li>Package test parallelisation set to automatically select the number of threads based on those available (#36).</li> <li>Move to exclusively using <code>ruff</code> for code formatting and linting; update to <code>ruff</code> version 0.6 (#43).</li> <li>Cookiecutter config set to have no license for the repository (i.e. internal IP) by default.</li> <li>Make upload and build of Docker image on AWS optional (#42).</li> </ul>"},{"location":"CHANGELOG/#v020-09-01-2024","title":"[v0.2.0] - 09-01-2024","text":""},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Only run AWS upload job if secrets are defined.</li> </ul>"},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Upload to PyPI option.</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Delete conda recipe if upload to conda is not desired.</li> <li><code>index_package</code> cookiecutter parameter split into <code>upload_conda_package</code> and <code>upload_pypi_package</code>.</li> <li>Uploading to Anaconda/PyPI defaults to \"n\".</li> <li>Documentation split into separate pages for setting up and updating projects.</li> </ul>"},{"location":"CHANGELOG/#v010-05-01-2024","title":"[v0.1.0] - 05-01-2024","text":"<p>These initial changes are all relative to the original cookiecutter PyPackage repository, of which this is a fork. The list is not exhaustive as many changes have been made.</p>"},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":""},{"location":"CHANGELOG/#added_2","title":"Added","text":"<ul> <li>GitHub actions that rely on City Modelling Lab reusable actions.</li> <li>Schema for Cookiecutter input argument config (in <code>cookiecutter.json</code>) + tests added to CI to validate the config and the schema itself.</li> <li>Pre-commit hooks and pre-commit CI</li> <li>Templates for different types of GitHub issues.</li> <li>Cookiecutter contributing guidelines and changelog.</li> <li>Dockerfile to generate basic Docker image from project.</li> <li>Memory profiling test template.</li> <li>Option to include recipe to build project with <code>conda</code>, ready to trigger the appropriate reusable actions to have it built and uploaded to an Anaconda channel (e.g. <code>city-modelling-lab</code>).</li> <li>Option to have a Jupyter Notebook directory (under <code>examples</code>) which will be automatically linted, formatted, tested, and rendered in the documentation.</li> </ul>"},{"location":"CHANGELOG/#changed_2","title":"Changed","text":"<ul> <li>Documentation based on Markdown and MKDocs instead of ReStructured text and Sphinx (for improved readability and simpler configuration).</li> <li>Python project config moved from <code>setup.py</code> to <code>pyproject.toml</code>.</li> <li>Differentiating between repository name (for github), package name (for indexing online), and module name (for importing in python). This extends the original use of <code>project_name</code> and <code>project_slug</code>, the latter being difficult to understand.</li> </ul>"},{"location":"CHANGELOG/#removed","title":"Removed","text":"<ul> <li>Use of Travis CI.</li> <li>Use of Tox.</li> <li>Upload to PyPi (with a plan to reintroduce this).</li> <li>Possibility to use Argparse for CLI (i.e., Click is now the only option).</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"CONTRIBUTING/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"CONTRIBUTING/#report-issues","title":"Report Issues","text":"<p>Is something not working?</p> <p> Report a bug</p> <p>Missing information in our docs?</p> <p> Report a docs issue</p> <p>Want to submit an idea?</p> <p> Request a change</p>"},{"location":"CONTRIBUTING/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement a fix for it.</p>"},{"location":"CONTRIBUTING/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"CONTRIBUTING/#write-documentation","title":"Write Documentation","text":"<p>Cookiecutter PyPackage could always use more documentation, whether as part of the official docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"CONTRIBUTING/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue or start a discussion.</p> <p>If you are proposing a new feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> </ul>"},{"location":"CONTRIBUTING/#setting-up-and-working-in-a-development-environment","title":"Setting up and working in a development environment","text":"<p>Ready to contribute? Here's how to set up <code>cookiecutter-pypackage</code> for local development. Please note this documentation assumes you already have <code>mamba</code> and <code>Git</code> installed and ready to go.</p> <ol> <li> <p>Fork the <code>cookiecutter-pypackage</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally in a directory of your choice (i.e., change <code>path/to/repositories</code>):</p> </li> </ol> <pre><code>cd path/to/repositories\ngit clone git@github.com:YOUR_GITHUB_USERNAME/cookiecutter-pypackage.git\n</code></pre> <ol> <li>Assuming you have mamba installed, you can create a new environment for your local    development by typing:</li> </ol> <pre><code>mamba create -c conda-forge -n cookiecutter-pypackage-dev --file requirements/dev.txt\nmamba activate cookiecutter-pypackage-dev\npip install --no-deps -e .\n</code></pre> <ol> <li>Install <code>pre-commit</code>, which will ensure your changes are properly formatted when you commit your code (or install extension to run Ruff and Black on save in your IDE):</li> </ol> <pre><code>pre-commit install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <ol> <li> <p>Make your changes! If your contribution is a bug fix or new feature, you may want to add a test to the existing test suite. See Add a New Test below for details.</p> </li> <li> <p>When you're done making changes on this new branch, run the tests:</p> </li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"CONTRIBUTING/#pull-request-pr-guidelines","title":"Pull Request (PR) Guidelines","text":"<p>Before you submit a PR, check that it meets these guidelines:</p> <ol> <li> <p>The changelog has been updated.</p> </li> <li> <p>If the pull request adds functionality, the docs should be updated.    Put your new functionality into a function with a docstring, and add the feature to the list in README.md.</p> </li> <li> <p>The PR should work for Python 3.10 - 3.12 (inclusive).    Continuous integration tests will run in your PR and will fail if your changes break anything.</p> </li> </ol>"},{"location":"CONTRIBUTING/#add-to-the-template","title":"Add to the template","text":"<p>Cookiecutter templates use Jinja templating syntax. For example, <code>{{ cookiecutter.module_name }}</code> -&gt; <code>python_boilerplate</code> on running cookiecutter. You can get a good feel for this by looking at the current implementation.</p> <p>The GitHub CI workflows also use the <code>{{}}</code> syntax, requiring anything that should be left behind after cookiecutter works its magic to be wrapped in {% raw %} and {% endraw %} commands.</p> <p>If you want to add an empty directory, you should add a <code>.ignore</code> file into it (e.g., see <code>resources/logos</code>). This will ensure that cruft actually builds the directories. In a post-generation hook, this <code>.ignore</code> file will be deleted and you will be left with the empty directory.</p>"},{"location":"CONTRIBUTING/#add-a-new-test","title":"Add a New Test","text":"<p>When fixing a bug or adding features, it's good practice to add a test to demonstrate your fix or new feature behaves as expected. These tests should focus on one tiny bit of functionality and prove changes are correct.</p> <p>To write and run your new test, follow these steps:</p> <ol> <li> <p>Add the new test to <code>tests/test_bake_project.py</code>.    Focus your test on the specific bug or a small part of the new feature.</p> </li> <li> <p>If you have already made changes to the code, stash your changes and confirm all your changes were stashed:</p> </li> </ol> <pre><code>git stash\ngit stash list\n</code></pre> <ol> <li>Run your test and confirm that your test fails.    If your test does not fail, rewrite the test until it fails on the original code:</li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Proceed work on your bug fix or new feature or restore your changes.    To restore your stashed changes and confirm their restoration:</li> </ol> <pre><code>git stash pop\ngit stash list\n</code></pre> <ol> <li>Rerun your test and confirm that your test passes.    If it passes, congratulations!</li> </ol>"},{"location":"","title":"Arup Cookiecutter Python Package Template","text":"<p>Cookiecutter template for an Arup Python package.</p> <p>This template is based on @audreyfeldroy's original cookiecutter template. It has been updated to use latest Python Package best practices and to align with Arup's City Modelling Lab Python projects.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Testing setup with pytest.</li> <li>Markdown based documentation, using mkdocs, ready for generation with GitHub pages.</li> <li>Project metadata and plugin configuration specified in a <code>pyproject.toml</code> file, according to the latest standards.</li> <li>Auto-release to your private conda channel when you create a new release on GitHub (optional).</li> <li>Command line interface using click (optional).</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<p>To be able to keep your project up-tp-date as changes are made to the template, we recommend you use Cruft, which is fully compatible with Cookiecutter. First, install the latest version of Cruft if you haven't installed it yet.</p> <pre><code>conda create -n cookiecutter cruft\nconda activate cookiecutter\n</code></pre> <p>Generate a local Python package project in a directory of your choice (change <code>my-repositories</code> to the relevant location on your device):</p> <pre><code>cd my-repositories\ncruft create https://github.com/arup-group/cookiecutter-pypackage\n</code></pre> <p>Then:</p> <ul> <li>Add the packages you will need for your project and their versions to <code>requirements/base.txt</code>.</li> <li>initialise your project as a git repository and link it to an online repository.</li> </ul> <p>For more details, see the tutorial.</p>"},{"location":"#keeping-your-project-up-to-date","title":"Keeping your project up-to-date","text":"<p>We may make changes to this template that you want to pull into your project after you have created it. Cruft allows you to do this, and one of your project's CI workflows will verify whether there are new template updates that you might like to merge in.</p> <p>To check if there are updates: <pre><code>cruft check\n</code></pre></p> <p>To apply updates: <pre><code>cruft update\n</code></pre></p>"},{"location":"#not-exactly-what-you-want","title":"Not Exactly What You Want?","text":"<p>Don't worry, you have options:</p>"},{"location":"#other-arup-cookiecutter-templates","title":"Other Arup Cookiecutter Templates","text":"<p>There are currently no other Arup cookiecutter templates.</p>"},{"location":"#other-cookiecutter-templates","title":"Other Cookiecutter Templates","text":"<p>You can find a list of other Python project templates on the parent template repository: audreyfeldroy/cookiecutter-pypackage.</p>"},{"location":"#fork-this-create-your-own","title":"Fork This / Create Your Own","text":"<p>If you have differences in your preferred setup, you can fork this to create your own version. Or you create your own; it doesn't strictly have to be a fork.</p> <ul> <li>Once you have your own version working, add it to the Other Arup Cookiecutter Templates list above with a brief description.</li> <li>It's up to you whether or not to rename your fork/own version. Do whatever you think sounds good.</li> </ul>"},{"location":"#or-submit-a-pull-request","title":"Or Submit a Pull Request","text":"<p>We also accept pull requests on this repository, if they're small!</p>"},{"location":"schema/","title":"Configuration values","text":"<p>You will be prompted to fill these values when you create your Python project. If you do not know what value to provide, press enter and a default value will be used.</p> <ul> <li> <p><code>full_name</code> (string): Your full name. Default: <code>\"Ove Arup\"</code>.</p> </li> <li> <p><code>email</code> (string): Your email address. Default: <code>\"ove.arup@arup.com\"</code>.</p> </li> <li> <p><code>github_username</code> (string): Your GitHub username. Default: <code>\"ovearup\"</code>.</p> </li> <li> <p><code>project_title</code> (string): The headline name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. Default: <code>\"Python Boilerplate\"</code>.</p> </li> <li> <p><code>repository_owner</code> (string): The owner of your GitHub repository (referring to e.g., https://github.com/arup-group). For personal projects, this can be your GitHub username. For Arup projects, this should be <code>arup-group</code>. Default: <code>\"arup-group\"</code>.</p> </li> <li> <p><code>repository_name</code> (string): Name of the github repository where you will host your project (i.e., https://github.com/[repository_owner]/[repository_name]). Typically, it is the \"slugified\" version of <code>project_title</code> (e.g. <code>My software package</code> -&gt; <code>my_software_package</code>) or an abbreviation derived from it (e.g., <code>Population Activity Modeller</code> -&gt; <code>pam</code>). Default: <code>\"Lower case equivalent of [project_title] with spaces and dashes (-) replaced with an underscore (_)\"</code>.</p> </li> <li> <p><code>package_name</code> (string): The name given to your package. This should be available on package indexing sites (PyPI/Anaconda). Typically, it is the same as the <code>module_name</code>, but if your preferred package name is already taken online, you should rename your project entirely or prepend the package name with e.g. <code>arup-</code>. For example, our PAM package is <code>pam</code> when imported in Python, but <code>cml-pam</code> online. Default: <code>\"[repository_name]\"</code>.</p> </li> <li> <p><code>module_name</code> (string): The name given to your module in Python. This should be available on package indexing sites (PyPI/Anaconda). Typically, it is the same as the <code>package_name</code>, assuming your preferred package name is available online. This is what users will call when importing your module in Python (e.g. <code>import pam</code>, even though the package name is <code>cml-pam</code>) or when calling your package from the command line (if you have a command line interface). Default: <code>\"[repository_name]\"</code>.</p> </li> <li> <p><code>project_short_description</code> (string): A 1-sentence description of what your Python package does. Default: <code>\"Python Boilerplate contains all the boilerplate you need to create a Python package.\"</code>.</p> </li> <li> <p><code>upload_pypi_package</code> (array): Whether to upload the package to PyPI on each release of a new version. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"n\"</code>.</li> </ul> </li> <li> <p><code>upload_conda_package</code> (array): Whether to upload the package to an Anaconda channel on each release of a new version. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"n\"</code>.</li> </ul> </li> <li> <p><code>upload_aws_image</code> (array): Whether to upload the repository to AWS to build and host a Docker image of the project. NOTE: requires CodeBuild configuration to be updated separately to have the image built on AWS. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"n\"</code>.</li> </ul> </li> <li> <p><code>conda_channel</code> (string): Your anaconda channel, if releases of your package will be uploaded to Anaconda. Default: <code>\"[github_username]\"</code>.</p> </li> <li> <p><code>create_jupyter_notebook_directory</code> (array): If \"y\", an <code>examples</code> directory will be created in which Jupyter Notebooks can be saved. These notebooks will be rendered in the documentation and will be formatted with Black and Ruff. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"y\"</code>.</li> </ul> </li> <li> <p><code>check_docs_accessibility_in_CI</code> (array): If \"y\", documentation will be checked for accessibility, according to the WCAG2AA standard, in Pull Request CI. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"n\"</code>.</li> </ul> </li> <li> <p><code>command_line_interface</code> (array): If \"y\", a <code>cli.py</code> file will be included in the project source code based on using <code>Click</code>. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"y\"</code>.</li> </ul> </li> <li> <p><code>create_author_file</code> (array): If \"y\", create an authors file. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"y\"</code>.</li> </ul> </li> <li> <p><code>create_docker_file</code> (array): If \"y\", create an Dockerfile which allows a Docker image of the project to be built in a linux virtual machine with a basic Bash entry-point. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"y\", \"n\"]</code>. Default: <code>\"y\"</code>.</li> </ul> </li> <li> <p><code>open_source_license</code> (array): Choose a license. Length must be at least 1.</p> <ul> <li>Items (string): Must be one of: <code>[\"MIT license\", \"BSD license\", \"ISC license\", \"Apache Software License 2.0\", \"GNU General Public License v3\", \"Not open source\"]</code>. Default: <code>\"Not open source\"</code>.</li> </ul> </li> </ul>"}]}